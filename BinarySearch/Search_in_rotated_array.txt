There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the
resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). 
For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 
if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1


================================================================================

Code:
----------
1. Without duplicates, only unique

class Solution {
public:
    int search(vector<int>& nums, int target)
    {
     for (int left = 0, right = nums.size() - 1; left <= right;)
        {
            int mid = (left + right) / 2;

            if(nums[mid] == target){
                return mid;
            }
            else if(nums[mid] >= nums[left])
            {
                // left part of the array is sorted
                if(target < nums[mid] && target >= nums[left]){
                    right = mid - 1;
                }
                else{
                    left = mid + 1;
                }
            }
            else if(nums[mid] <= nums[right]){
                // right part of the array is sorted
                if(target > nums[mid] && target <= nums[right]){
                    left = mid + 1;
                }
                else{
                    right = mid - 1;
                }
            }
        }

        return -1;
    }
}; 


======================================

2. With duplicates
---------------------

int search(vector<int>& nums, int target)
    {
     for (int left = 0, right = nums.size() - 1; left <= right;)
        {
            int mid = (left + right) / 2;

            if(nums[mid] == target){
                return mid;
            }
            else if(nums[mid] > nums[left])
            {
                // left part of the array is sorted
                if(target < nums[mid] && target >= nums[left]){
                    right = mid - 1;
                }
                else{
                    left = mid + 1;
                }
            }
            else if(nums[mid] < nums[right]){
                // right part of the array is sorted
                if(target > nums[mid] && target <= nums[right]){
                    left = mid + 1;
                }
                else{
                    right = mid - 1;
                }
            }
            else if(nums[mid] == nums[left]){
                if(nums[mid] != nums[right])
                {
                    // Then elements in left half must be identical. 
                    // Because if not, then it's impossible to have either nums[mid] < nums[right] or nums[mid] > nums[right]
                    // Then we only need to search the right half.
                    left = mid+1;
                }
                else{
                    // nums[left] = nums[mid] = nums[right], we have to search both halves.
                    right = mid-1;
                } 
            }
        }

        return -1;
    }