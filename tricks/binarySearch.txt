Specifically, it fails if the sum of low and high is greater than the maximum positive int value (2^31 - 1). 
The sum overflows to a negative value, and the value stays negative when divided by two. 
In C this causes an array index out of bounds with unpredictable results. 
In Java, it throws ArrayIndexOutOfBoundsException.

(left + right) / 2 is not a safe operation on high numbers.
Better to use left + ((right - left)/2) or (right + left) >> 1 which are equivalent.

1. To find exact element (left = mid + 1, right = mid - 1 )
2. To find right neighbour element (left = mid + 1, right = mid )
3. To find left element (left = mid, right = mid - 1 )